'''
Yugang Created at Aug 08, 2016, CHX-NSLS-II

Create a PDF file from XPCS data analysis results, which are generated by CHX data analysis pipeline

How to use: 
python Create_Report.py  full_file_path uid  output_dir (option)

An exmplae to use:
python Create_Report.py  /XF11ID/analysis/2016_2/yuzhang/Results/August/af8f66/ af8f66

python Create_Report.py  /XF11ID/analysis/2016_2/yuzhang/Results/August/af8f66/ af8f66  /XF11ID/analysis/2016_2/yuzhang/Results/August/af8f66/test/

'''




from reportlab.pdfgen  import  canvas
from reportlab.lib.units import inch, cm , mm   
from reportlab.lib.colors import pink, green, brown, white, black, red, blue


from reportlab.lib.styles import getSampleStyleSheet
#from reportlab.platypus import Image, Paragraph, Table

from reportlab.lib.pagesizes import letter, A4
from chxanalys.chx_generic_functions import (pload_obj )


from PIL import Image
from time import time
from datetime import datetime

import sys,os


        



data_dir = '/XF11ID/analysis/2016_2/yuzhang/Results/August/af8f66/'
uid = 'af8f66'

out_dir = data_dir + 'test/'
if not os.path.exists(out_dir):
    os.makedirs(out_dir)
    
    
'''global definition'''

avg_img_file = 'uid=%s--img-avg-.png'%uid   
ROI_on_img_file = 'uid=%s--ROI-on-Image-.png'%uid
qiq_file = 'uid=%s--Circular-Average-.png'%uid   
ROI_on_Iq_file = 'uid=%s--ROI-on-Iq-.png'%uid  

Iq_t_file = 'uid=%s--Iq-t-.png'%uid
img_sum_t_file = 'uid=%s--img-sum-t.png'%uid
wat_file= 'uid=%s--Waterfall-.png'%uid
Mean_inten_t_file= 'uid=%s--Mean-intensity-of-each-ROI-.png'%uid

g2_file = 'uid=%s--g2-.png'%uid
g2_fit_file = 'uid=%s--g2--fit-.png'%uid
q_rate_file = 'uid=--%s--Q-Rate--fit-.png'%uid    

two_time_file = 'uid=%s--Two-time-.png'%uid
two_g2_file = 'uid=%s--g2--two-g2-.png'%uid


class create_pdf_report( object ):
    
    '''Create a pdf report by giving data_dir, uid, out_dir
       data_dir: the input data directory, including all necessary images
       the images names should be:
            meta_file = 'uid=%s-md'%uid
            avg_img_file = 'uid=%s--img-avg-.png'%uid   
            ROI_on_img_file = 'uid=%s--ROI-on-Image-.png'%uid
            qiq_file = 'uid=%s--Circular-Average-.png'%uid   
            ROI_on_Iq_file = 'uid=%s--ROI-on-Iq-.png'%uid  

            Iq_t_file = 'uid=%s--Iq-t-.png'%uid
            img_sum_t_file = 'uid=%s--img-sum-t.png'%uid
            wat_file= 'uid=%s--Waterfall-.png'%uid
            Mean_inten_t_file= 'uid=%s--Mean-intensity-of-each-ROI-.png'%uid

            g2_file = 'uid=%s--g2-.png'%uid
            g2_fit_file = 'uid=%s--g2--fit-.png'%uid
            q_rate_file = 'uid=--%s--Q-Rate--fit-.png'%uid    

            two_time_file = 'uid=%s--Two-time-.png'%uid
            two_g2_file = 'uid=%s--g2--two-g2-.png'%uid
            
      uid: the unique id
      out_dir: the output directory
      
      Output: 
          A PDF file with name as "XPCS Analysis Report for uid=%s"%uid in out_dir folder
    '''       
    
    def __init__( self, data_dir, uid, out_dir=None ):
        self.data_dir = data_dir
        self.uid = uid
        if out_dir is None:
            out_dir = data_dir 
        if not os.path.exists(out_dir):
            os.makedirs(out_dir)
        self.out_dir=out_dir
        
        self.styles = getSampleStyleSheet()
        self.width, self.height = letter
        
        
        dt =datetime.now()
        CurTime = '%02d/%02d/%s/-%02d/%02d/' % ( dt.month, dt.day, dt.year,dt.hour,dt.minute)
        self.CurTime = CurTime
      
        c = canvas.Canvas( out_dir + "XPCS_Analysis_Report_for_uid=%s.pdf"%uid, pagesize=letter)
        c.setTitle("XPCS Analysis Report for uid=%s"%uid)
        #load metadata        
        meta_file = 'uid=%s-md'%uid
        md = pload_obj( data_dir + meta_file )         
        self.c = c
        self.md = md
        
        self.sub_title_num = 0
        #self.report_header(page=1, top=730, new_page=False)
        #self.report_meta(new_page=False)
        
    def report_header(self, page=1, new_page=False):
        '''create headers, including title/page number'''
        c= self.c
        CurTime = self.CurTime
        uid=self.uid
        
        c.setFillColor(black)
        c.setFont("Helvetica", 14)
        #add page number
        c.drawString(250, 10, "Page--%s--"%( page ) )  
        #add time stamp
        c.drawString(380, 10, "created at %s@CHX"%( CurTime ) ) 
        #add title
        c.setFont("Helvetica", 22)
        #c.drawString(180,760, "XPCS Report of uid=%s"%uid )  #add title
        c.drawString(140,760, "XPCS Analysis Report for uid=%s"%uid )  #add title
        #add a line under title
        c.setStrokeColor( red )
        c.setLineWidth(width=1.5) 
        c.line( 50, 750, 550, 750  )
        if new_page:
            c.showPage()
            c.save()

        
    def report_meta(self, top=730, new_page=False):
        '''create the meta data report,
        the meta data include:  
            uid
            Sample:
            Measurement
            Wavelength
            Detector-Sample Distance
            Beam Center
            Mask file
            Data dir
            Pipeline notebook        
        '''

        c=self.c
        #load metadata
        md = self.md
        #add sub-title, metadata
        c.setFont("Helvetica", 20)
        
        ds = 15
        self.sub_title_num += 1
        c.drawString(10, top, "%s. Metadata"%self.sub_title_num )  #add title

        top = top - 5
        c.setFont("Helvetica", 12)
        c.drawString(30, top-ds, 'uid: %s'%uid )
        c.drawString(30, top-ds*2, 'Sample: %s'%md['sample'] )
        c.drawString(30, top-ds*3, 'Measurement: %s'%md['Measurement'] )
        c.drawString(30, top-ds*4, 'Wavelength: %s A-1'%md['incident_wavelength'] )
        c.drawString(30, top-ds*5, 'Detector-Sample Distance: %s m'%(md['detector_distance']) )
        c.drawString(30, top-ds*6, 'Beam Center: [%s, %s] (pixel)'%(md['beam_center_x'], md['beam_center_y']) )
        c.drawString(30, top-ds*7, 'Mask file: %s'%md['mask_file'] )
        c.drawString(30, top-ds*8, 'Data dir: %s'%data_dir )
        c.setFont("Helvetica", 10)
        c.drawString(30, top-ds*9, 'Pipeline notebook: %s'%md['NOTEBOOK_FULL_PATH'] )
        if new_page:
            c.showPage()
            c.save()
        
    def report_static( self, top=560, new_page=False):
        '''create the static analysis report
           two images:
               average intensity image
               circular average
        
        '''
        #add sub-title, static images

        c= self.c
        c.setFont("Helvetica", 20)
        
        
        ds =  220
        self.sub_title_num +=1
        c.drawString(10, top, "%s. Static Analysis"%self.sub_title_num )  #add title

        #add average image
        c.setFont("Helvetica", 14)
        imgf = avg_img_file  
        image = data_dir + imgf
        im = Image.open( image )
        ratio = float(im.size[1])/im.size[0]
        height=  180
        c.drawImage( image, 60, top - ds,  width= height/ratio,height=height,mask=None)

        c.setFont("Helvetica", 16)
        c.setFillColor( blue) 
        c.drawString( 90, top- 35,  'Average Intensity Image'    )

        c.setFont("Helvetica", 12)
        c.setFillColor(red) 
        c.drawString( 80, top- 230,  'filename: %s'%imgf    )

        #add q_Iq

        imgf = qiq_file 
        image = data_dir + imgf
        im = Image.open( image )
        ratio = float(im.size[1])/im.size[0]
        height= 180
        c.drawImage( image, 320, top - ds,  width= height/ratio,height=height,mask=None)

        c.setFont("Helvetica", 16)
        c.setFillColor( blue) 
        c.drawString( 390, top- 35,  'Circular Average'    )

        c.setFont("Helvetica", 12)
        c.setFillColor(red) 
        c.drawString( 320, top- 230,  'filename: %s'%imgf    )        
        if new_page:
            c.showPage()
            c.save()

    def report_ROI( self, top= 300, new_page=False):
        '''create the static analysis report
            two images:
               ROI on average intensity image
               ROI on circular average
        '''   
        
        c= self.c
        #add sub-title, static images
        c.setFillColor(black)
        c.setFont("Helvetica", 20)        
        ds = 230
        self.sub_title_num +=1
        c.drawString(10, top, "%s. Define of ROI"%self.sub_title_num )  #add title
        #add ROI on image
        c.setFont("Helvetica", 14)
        imgf = ROI_on_img_file
        image = data_dir + imgf
        im = Image.open( image )
        ratio = float(im.size[1])/im.size[0]
        height= 240
        #c.drawInlineImage( image, 30, top - ds*1.1,  width= height/ratio,height=height)
        c.drawImage( image, 60, top - ds*1.15,  width= height/ratio,height=height,mask= 'auto')
        c.setFont("Helvetica", 16)
        c.setFillColor( blue) 
        c.drawString( 110, top- 35,  'ROI on Image'    )
        c.setFont("Helvetica", 12)
        c.setFillColor(red) 
        c.drawString( 60, top- 260,  'filename: %s'%imgf    )
        
        #add q_Iq
        imgf = ROI_on_Iq_file
        image = data_dir + imgf
        im = Image.open( image )
        ratio = float(im.size[1])/im.size[0]
        height= 180
        c.drawImage( image, 320, top - ds,  width= height/ratio,height=height,mask=None)

        c.setFont("Helvetica", 16)
        c.setFillColor( blue) 
        c.drawString( 420, top- 35,  'ROI on Iq'    )
        c.setFont("Helvetica", 12)
        c.setFillColor(red) 
        c.drawString( 350, top- 260,  'filename: %s'%imgf    )
        
        if new_page:
            c.showPage()
            c.save()


    def report_time_analysis( self, top= 720,new_page=False):
        '''create the time dependent analysis report
           four images:
               each image total intensity as a function of time
               iq~t
               waterfall
               mean intensity of each ROI as a function of time               
        '''   
        c= self.c

        #add sub-title, Time-dependent plot
        c.setFont("Helvetica", 20)
        top1=top
        ds = 20
        self.sub_title_num +=1
        c.drawString(10, top, "%s. Time Dependent Plot"%self.sub_title_num )  #add title
        c.setFont("Helvetica", 14)
        
        top = top1 - 160
        #add q_Iq_t
        imgf = img_sum_t_file
        image = data_dir + imgf
        im = Image.open( image )
        ratio = float(im.size[1])/im.size[0]
        height= 140
        c.drawImage( image, 80, top,  width= height/ratio,height=height,mask=None)

        c.setFont("Helvetica", 16)
        c.setFillColor( blue) 
        c.drawString( 140, top1 - 20 ,  'img sum ~ t'    )

        c.setFont("Helvetica", 12)
        c.setFillColor(red) 
        c.drawString( 80, top- 5,  'filename: %s'%imgf    )

        #add mean_intensity_each_roi
        imgf = Iq_t_file
        image = data_dir + imgf
        im = Image.open( image )
        ratio = float(im.size[1])/im.size[0]
        height= 140
        c.drawImage( image, 350, top,  width= height/ratio,height=height,mask=None)
        

        c.setFont("Helvetica", 16)
        c.setFillColor( blue) 
        c.drawString( 420, top1-20 ,  'iq ~ t'    )

        c.setFont("Helvetica", 12)
        c.setFillColor(red) 
        c.drawString( 360, top- 5,  'filename: %s'%imgf    )

        top = top1 - 340
        #add waterfall plot
        imgf = wat_file
        image = data_dir + imgf
        im = Image.open( image )
        ratio = float(im.size[1])/im.size[0]
        height= 160
        c.drawImage( image, 80, top,  width= height/ratio,height=height,mask=None)

        c.setFont("Helvetica", 16)
        c.setFillColor( blue) 
        c.drawString( 140, top + height,  'waterfall plot'    )

        c.setFont("Helvetica", 12)
        c.setFillColor(red) 
        c.drawString( 80, top- 5,  'filename: %s'%imgf    )


        #add mean-intensity of each roi
        imgf = Mean_inten_t_file
        image = data_dir + imgf
        im = Image.open( image )
        ratio = float(im.size[1])/im.size[0]
        height= 160
        c.drawImage( image, 360, top,  width= height/ratio,height=height,mask=None)

        c.setFont("Helvetica", 16)
        c.setFillColor( blue) 
        c.drawString( 330, top + height,  'Mean-intensity-of-each-ROI'    )

        c.setFont("Helvetica", 12)
        c.setFillColor(red) 
        c.drawString( 310, top- 5,  'filename: %s'%imgf    )
        
        if new_page:
            c.showPage()
            c.save()

    def report_one_time( self, top= 350,new_page=False):
        '''create the one time correlation function report
           Two images:
               One Time Correlation Function with fit
               q-rate fit
        '''   
        c= self.c
        #add sub-title, One Time Correlation Function
        c.setFillColor(black)
        c.setFont("Helvetica", 20)
        ds = 20
        self.sub_title_num +=1
        c.drawString(10, top, "%s. One Time Correlation Function"%self.sub_title_num  )  #add title
        c.setFont("Helvetica", 14)
        #add g2 plot
        top = top - 320

        imgf = g2_fit_file
        image = data_dir + imgf
        im = Image.open( image )
        ratio = float(im.size[1])/im.size[0]
        height= 300
        c.drawImage( image, 1, top,  width= height/ratio,height=height, mask= 'auto')
        #c.drawImage( image, 1, top,  width= height/ratio,height=height, mask= None )
        c.setFont("Helvetica", 16)
        c.setFillColor( blue) 
        c.drawString( 150, top + height ,  'g2 fit plot'    )

        c.setFont("Helvetica", 12)
        c.setFillColor(red) 
        c.drawString( 80, top- 0,  'filename: %s'%imgf    )

        #add g2 plot fit
        top = top + 70 #
        imgf = q_rate_file
        image = data_dir + imgf
        im = Image.open( image )
        ratio = float(im.size[1])/im.size[0]
        height= 180
        c.drawImage( image, 350, top,  width= height/ratio,height=height,mask= 'auto')

        c.setFont("Helvetica", 16)
        c.setFillColor( blue) 
        c.drawString( 450, top + 230,  'q-rate fit  plot'    )
        c.setFont("Helvetica", 12)
        c.setFillColor(red) 
        c.drawString( 380, top- 5,  'filename: %s'%imgf    )
        
        if new_page:
            c.showPage()
            c.save()

    def report_two_time( self, top= 720, new_page=False):
        '''create the one time correlation function report
           Two images:
               Two Time Correlation Function
               two one-time correlatoin function from multi-one-time and from diagonal two-time
        '''   
        c= self.c
        #add sub-title, Time-dependent plot
        c.setFont("Helvetica", 20)
        
        ds = 20
        self.sub_title_num +=1
        c.drawString(10, top, "%s. Two Time Correlation Fucntion"%self.sub_title_num )  #add title
        c.setFont("Helvetica", 14)
        
        top1=top
        top = top1 - 330
        #add q_Iq_t
        imgf = two_time_file
        image = data_dir + imgf
        im = Image.open( image )
        ratio = float(im.size[1])/im.size[0]
        height= 300
        c.drawImage( image, 80, top,  width= height/ratio,height=height,mask=None)

        c.setFont("Helvetica", 16)
        c.setFillColor( blue) 
        c.drawString( 180, top + 300 ,  'two time correlation fucntion'    )

        c.setFont("Helvetica", 12)
        c.setFillColor(red) 
        c.drawString( 180, top- 10,  'filename: %s'%imgf    )
        top = top - 340
        #add q_Iq_t
        imgf = two_g2_file
        image = data_dir + imgf
        im = Image.open( image )
        ratio = float(im.size[1])/im.size[0]
        height= 300
        c.drawImage( image, 100, top,  width= height/ratio,height=height,mask=None)

        c.setFont("Helvetica", 16)
        c.setFillColor( blue) 
        c.drawString( 210, top + 310,  'compared g2'    )

        c.setFont("Helvetica", 12)
        c.setFillColor(red) 
        c.drawString( 180, top- 10,  'filename: %s'%imgf    )

        if new_page:
            c.showPage()
            c.save()

    def new_page(self):
        c=self.c
        c.showPage()
    
    def save_page(self):
        c=self.c
        c.save()
        
    def done(self):
        out_dir = self.out_dir
        self.uid = uid
        print()
        print('*'*40)
        print ('The pdf report is created in: %s with filename as: Report_uid=%s.pdf'%(out_dir,uid ))
        print('*'*40)





